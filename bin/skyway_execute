#!/usr/bin/env python

import argparse
from datetime import datetime, timezone
from io import StringIO
import os
import subprocess
from subprocess import PIPE, Popen

import skyway
from skyway.cloud.aws import *
from skyway.cloud.gcp import *
from skyway.cloud.azure import *
from skyway.cloud.slurm import *

import colorama
from colorama import Fore

# export SKYWAYROOT=/project/rcc/trung/skyway-github
#./skyway_batch job_script.sh

class InstanceDescriptor:
    def __init__(self, jobname: str, account_name: str, node_type: str, walltime: str, vendor_name: str):
        self.jobname = jobname
        self.account_name = account_name
        self.node_type = node_type
        self.walltime = walltime
        self.vendor_name = vendor_name

        self.account = None
        if 'aws' in vendor_name:
            self.account = AWS(account_name)
        elif 'gcp' in vendor_name:
            self.account = GCP(account_name)
        elif 'azure' in vendor_name:
            self.account = AZURE(account_name)
        elif 'midway3' in vendor_name:
            self.account = SLURMCluster(account_name)

        self.user = os.environ['USER']

    def execute(self, script_name=None):
       
        # execute the commands listed in the script on the compute node
        if script_name is not None:
            if "midway3" in self.vendor_name:
                # for on-premises like midway3 instanceID is the host ip (which happens to be the node name)
                instanceID = self.account.get_host_ip(self.jobname)
                self.account.execute_script(instanceID, script_name)

            elif "aws" in self.vendor_name:
                instanceID = self.account.get_instance_ID(self.jobname)
                self.account.execute_script(instanceID, script_name)

            elif "gcp" in self.vendor_name:
                instanceID = self.account.get_instance_ID(self.jobname)
                self.account.execute_script(instanceID, script_name)
  

'''
   parse the job script to get the account information, node type (constraint) and walltime
'''
def parse_script(filename):
    jobname = ""
    account = ""
    constraint = ""
    walltime = ""
    skyway_cmd = ""
    with open(filename, 'r') as f:
        lines = f.readlines()
        for line in lines:
            # extract only lines with #SBATCH, remove \n characters
            # remove all the spaces
            # split at '='
            if "#SBATCH" in line:
                # remove #SBATCH
                line = line.replace('#SBATCH ','').strip('\n')
                line = line.replace(' ','')
                args = line.split('=')
                if len(args) == 2:
                    if args[0] == "-job-name":
                        jobname = args[1]
                    if args[0] == "--account":
                        account = args[1]
                    if args[0] == "--constraint":
                        constraint = args[1]
                    if args[0] == "--time":
                        walltime = args[1]                        
            elif "skyway_" in line:
                skyway_cmd = line.strip('\n')
            else:
                continue

    return { 'jobname': jobname,
             'account': account,
             'constraint': constraint,
             'walltime': walltime,
             'skyway_cmd': skyway_cmd
            }

if __name__ == "__main__":
   
    colorama.init(autoreset=True)

    msg = "Skyway execute commands on a running VM of a cloud account"
    parser = argparse.ArgumentParser(description=msg)
    parser.add_argument('-J', '--job-name', dest='jobname', default="your-run", help="Job name")
    parser.add_argument('-A', '--account', dest='account', default="", help="Account name")
    parser.add_argument('--provider', dest='provider', default="", help="Vendor name: AWS, GCP, Azure, or RCC Midway")
    parser.add_argument(dest='script', nargs='*', default="", help="Script to run")
    args = parser.parse_args()

    job_name = args.jobname
    account_name = args.account
    provider = args.provider.lower()
    script = args.script[0]

    if provider == "":
        # try to infer the vendor name from account
        if 'aws' in account_name:
            vendor_name = "aws"
        elif 'gcp' in account_name:
            vendor_name = "gcp"
        elif 'azure' in account_name:
            vendor_name = "azure"
        elif 'oci' in account_name:
            vendor_name = "oci"
        elif 'midway3' in account_name or 'rcc-staff' in account_name:
            vendor_name = "rcc-midway3"
    else:
        vendor_name = provider

    args = parse_script(script)
    skyway_cmd = args['skyway_cmd']

    if provider == "":
        # try to infer the vendor name from account
        if 'aws' in account_name:
            vendor_name = "aws"
        elif 'gcp' in account_name:
            vendor_name = "gcp"
        elif 'azure' in account_name:
            vendor_name = "azure"
        elif 'midway3' in account_name or 'rcc-staff' in account_name:
            vendor_name = "rcc-midway3"
        else:
            print(f"account name {account_name} is not valid")
            quit
    else:
        vendor_name = provider

    # get the env variable SKYWAYROOT
    skywayroot = os.environ['SKYWAYROOT']
    if skywayroot == "":
        raise Exception("SKYWAYROOT is not defined.")

    # create an instance descriptor
    instanceDescriptor = InstanceDescriptor(job_name, account_name, "", "", vendor_name)

    # execute pre-launch commands: e.g. data transfers
    if skyway_cmd != "":
        # append the command with account and job name
        skyway_cmd += " --account=" + account_name + " -J" + job_name
        os.system(skyway_cmd)

    # submit job
    instanceDescriptor.execute(script_name=script)
